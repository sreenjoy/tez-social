name: Deployment Monitor

on:
  # Run scheduled checks
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of check to perform'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - vercel
          - railway
  # Run when new code is pushed to main
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/deployment-monitor.yml'
  # Trigger on deployment events
  deployment:
  # Trigger on deployment status events
  deployment_status:

# Add permissions to allow workflow triggering
permissions:
  actions: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  pull-requests: write

jobs:
  monitor-deployments:
    runs-on: ubuntu-latest
    outputs:
      railway_status: ${{ steps.check_railway.outputs.railway_status }}
      vercel_status: ${{ steps.check_vercel.outputs.vercel_status }}
      vercel_deployment_id: ${{ steps.check_vercel.outputs.vercel_deployment_id }}
      vercel_url: ${{ steps.check_vercel.outputs.vercel_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Create personal access token
        id: create-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Add immediate deployment check
        id: deployment_event_info
        if: github.event_name == 'deployment' || github.event_name == 'deployment_status'
        run: |
          echo "Running immediate deployment check (triggered by ${{ github.event_name }})"
          echo "deployment_triggered=true" >> $GITHUB_OUTPUT
          echo "deployment_id=${{ github.event.deployment.id || '' }}" >> $GITHUB_OUTPUT
          echo "deployment_status=${{ github.event.deployment_status.state || 'pending' }}" >> $GITHUB_OUTPUT
          echo "deployment_target_url=${{ github.event.deployment_status.target_url || '' }}" >> $GITHUB_OUTPUT
          
          # Log the deployment details for debugging
          echo "Deployment event details:"
          echo "  Event type: ${{ github.event_name }}"
          echo "  Deployment ID: ${{ github.event.deployment.id || 'N/A' }}"
          echo "  Status: ${{ github.event.deployment_status.state || 'N/A' }}"
          echo "  Target URL: ${{ github.event.deployment_status.target_url || 'N/A' }}"
          echo "  Environment: ${{ github.event.deployment.environment || github.event.deployment_status.environment || 'N/A' }}"

      - name: Check Railway deployment
        if: ${{ github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'railway' || github.event_name == 'push' || github.event_name == 'deployment' || github.event_name == 'deployment_status' }}
        id: check_railway
        run: |
          echo "Checking Railway deployment status..."
          BACKEND_URL="https://tez-social-production.up.railway.app"
          
          # Test if the backend API is accessible
          BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $BACKEND_URL)
          BACKEND_API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $BACKEND_URL/api/health || echo "500")
          
          echo "Backend status code: $BACKEND_STATUS"
          echo "Backend API status code: $BACKEND_API_STATUS"
          
          # 404 on root but 200 on health endpoint is considered healthy for APIs
          if [[ "$BACKEND_API_STATUS" == "200" ]]; then
            echo "✅ Railway backend API is healthy"
            echo "railway_status=healthy" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Railway backend API is not responding correctly"
            echo "railway_status=unhealthy" >> $GITHUB_OUTPUT
          fi

      - name: Check Vercel deployment
        if: ${{ github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'vercel' || github.event_name == 'push' || github.event_name == 'deployment' || github.event_name == 'deployment_status' }}
        id: check_vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "Checking Vercel deployment status..."
          
          # Check if we have a deployment ID from the event
          if [[ "${{ steps.deployment_event_info.outputs.deployment_triggered }}" == "true" && "${{ steps.deployment_event_info.outputs.deployment_target_url }}" != "" ]]; then
            echo "Using deployment details from webhook event"
            DEPLOYMENT_ID="${{ steps.deployment_event_info.outputs.deployment_id }}"
            DEPLOYMENT_STATE="${{ steps.deployment_event_info.outputs.deployment_status }}"
            DEPLOYMENT_URL="${{ steps.deployment_event_info.outputs.deployment_target_url }}"
          else
            # Get the latest deployment
            LATEST_DEPLOYMENT=$(curl -s -H "Authorization: Bearer $VERCEL_TOKEN" "https://api.vercel.com/v6/deployments?limit=1&teamId=$VERCEL_ORG_ID&projectId=$VERCEL_PROJECT_ID")
            
            # Extract deployment details
            DEPLOYMENT_ID=$(echo $LATEST_DEPLOYMENT | jq -r '.deployments[0].uid')
            DEPLOYMENT_STATE=$(echo $LATEST_DEPLOYMENT | jq -r '.deployments[0].state')
            DEPLOYMENT_URL=$(echo $LATEST_DEPLOYMENT | jq -r '.deployments[0].url')
          fi
          
          echo "Latest deployment ID: $DEPLOYMENT_ID"
          echo "Deployment state: $DEPLOYMENT_STATE"
          echo "Deployment URL: $DEPLOYMENT_URL"
          
          # Check all recent deployments
          ALL_DEPLOYMENTS=$(curl -s -H "Authorization: Bearer $VERCEL_TOKEN" "https://api.vercel.com/v6/deployments?limit=5&teamId=$VERCEL_ORG_ID&projectId=$VERCEL_PROJECT_ID")
          
          # Count error deployments
          ERROR_COUNT=$(echo $ALL_DEPLOYMENTS | jq -r '.deployments | map(select(.state == "ERROR")) | length')
          echo "Number of error deployments: $ERROR_COUNT"
          
          # Check if the deployment is ready
          if [[ "$DEPLOYMENT_STATE" == "READY" ]]; then
            # Test if the frontend is accessible
            FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://$DEPLOYMENT_URL)
            
            if [[ "$FRONTEND_STATUS" == "200" && "$ERROR_COUNT" -eq 0 ]]; then
              echo "✅ Vercel frontend is healthy"
              echo "vercel_status=healthy" >> $GITHUB_OUTPUT
            else
              echo "⚠️ Vercel frontend returns $FRONTEND_STATUS (with $ERROR_COUNT error deployments)"
              echo "vercel_status=unhealthy" >> $GITHUB_OUTPUT
              echo "vercel_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
              echo "vercel_deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ Vercel deployment is not ready (state: $DEPLOYMENT_STATE)"
            echo "vercel_status=deploying" >> $GITHUB_OUTPUT
            echo "vercel_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
            echo "vercel_deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          fi
          
          # For immediate deployment checks, add a 60-second retries
          if [[ "${{ github.event_name }}" == "deployment" || "${{ github.event_name }}" == "deployment_status" ]]; then
            if [[ "$DEPLOYMENT_STATE" != "READY" && "$DEPLOYMENT_STATE" != "ERROR" ]]; then
              echo "Deployment still in progress. Starting quick retry mechanism..."
              
              # Try up to 6 times with 10-second intervals (total 60 seconds)
              for i in {1..6}; do
                echo "Retry $i: Waiting 10 seconds..."
                sleep 10
                
                # Re-check deployment status
                UPDATED_DEPLOYMENT=$(curl -s -H "Authorization: Bearer $VERCEL_TOKEN" "https://api.vercel.com/v6/deployments/$DEPLOYMENT_ID?teamId=$VERCEL_ORG_ID")
                UPDATED_STATE=$(echo $UPDATED_DEPLOYMENT | jq -r '.state')
                
                echo "Updated deployment state: $UPDATED_STATE"
                
                if [[ "$UPDATED_STATE" == "READY" || "$UPDATED_STATE" == "ERROR" ]]; then
                  echo "Deployment reached final state: $UPDATED_STATE"
                  echo "vercel_status=$UPDATED_STATE" >> $GITHUB_OUTPUT
                  break
                fi
              done
            fi
          fi

      - name: Determine next action
        id: next_action
        run: |
          RAILWAY_STATUS="${{ steps.check_railway.outputs.railway_status }}"
          VERCEL_STATUS="${{ steps.check_vercel.outputs.vercel_status }}"
          
          if [[ "$RAILWAY_STATUS" == "unhealthy" ]]; then
            echo "⚠️ Railway backend is unhealthy, triggering backend fix workflow"
            echo "workflow=fix-railway" >> $GITHUB_OUTPUT
          elif [[ "$VERCEL_STATUS" == "unhealthy" ]]; then
            echo "⚠️ Vercel frontend is unhealthy, triggering frontend fix workflow"
            echo "workflow=fix-vercel" >> $GITHUB_OUTPUT
          elif [[ "$VERCEL_STATUS" == "deploying" ]]; then
            echo "⏳ Vercel is still deploying, will check again later"
            echo "workflow=wait" >> $GITHUB_OUTPUT
          else
            echo "✅ All deployments are healthy"
            echo "workflow=none" >> $GITHUB_OUTPUT
          fi

      - name: Trigger fix workflow if needed
        if: steps.next_action.outputs.workflow != 'none' && steps.next_action.outputs.workflow != 'wait'
        run: |
          WORKFLOW="${{ steps.next_action.outputs.workflow }}"
          echo "Triggering $WORKFLOW workflow..."
          
          if [[ "$WORKFLOW" == "fix-vercel" ]]; then
            # For Vercel workflow, include deployment ID and URL
            DEPLOYMENT_ID="${{ steps.check_vercel.outputs.vercel_deployment_id || 'auto-detect' }}"
            DEPLOYMENT_URL="${{ steps.check_vercel.outputs.vercel_url || 'auto-detect' }}"
            
            curl -X POST \
              -H "Authorization: Bearer ${{ steps.create-token.outputs.token }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/workflows/fix-vercel.yml/dispatches" \
              -d "{\"ref\":\"main\", \"inputs\":{\"deployment_id\":\"$DEPLOYMENT_ID\", \"deployment_url\":\"$DEPLOYMENT_URL\"}}"
          else
            # For Railway workflow, no specific inputs needed
            curl -X POST \
              -H "Authorization: Bearer ${{ steps.create-token.outputs.token }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/workflows/fix-railway.yml/dispatches" \
              -d "{\"ref\":\"main\"}"
          fi
          
          echo "✅ Triggered $WORKFLOW workflow"

      - name: Force fix all deployments if multiple checks have failed
        if: github.event_name == 'schedule'
        id: force_fix
        run: |
          # Check if we have persistent failures by looking at workflow run history
          WORKFLOW_HISTORY=$(curl -s -H "Authorization: Bearer ${{ steps.create-token.outputs.token }}" "https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ github.workflow }}/runs?per_page=5")
          
          # Count failed runs
          FAILED_COUNT=$(echo $WORKFLOW_HISTORY | jq -r '.workflow_runs | map(select(.conclusion == "failure")) | length')
          echo "Number of recent failed runs: $FAILED_COUNT"
          
          if [[ $FAILED_COUNT -ge 3 ]]; then
            echo "Multiple failures detected, triggering comprehensive fix workflows"
            echo "trigger_fix_all=true" >> $GITHUB_OUTPUT
          else
            echo "trigger_fix_all=false" >> $GITHUB_OUTPUT
          fi

      - name: Comprehensive fix for persistent issues
        if: steps.force_fix.outputs.trigger_fix_all == 'true'
        run: |
          echo "Triggering comprehensive fix for persistent deployment issues"
          
          # Trigger both fix workflows
          curl -X POST \
            -H "Authorization: Bearer ${{ steps.create-token.outputs.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/fix-vercel.yml/dispatches" \
            -d '{"ref":"main", "inputs":{"deployment_id":"auto-detect", "deployment_url":"auto-detect"}}'
            
          curl -X POST \
            -H "Authorization: Bearer ${{ steps.create-token.outputs.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/fix-railway.yml/dispatches" \
            -d '{"ref":"main"}'
            
          echo "✅ Triggered comprehensive fix for all deployment platforms"

      - name: Create deployment status report
        run: |
          echo "## Deployment Status Report" > $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Railway Backend" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.check_railway.outputs.railway_status }}" == "healthy" ]]; then
            echo "✅ **Healthy** - Backend API is responding correctly" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Unhealthy** - Backend API is not responding correctly" >> $GITHUB_STEP_SUMMARY
            echo "- Triggering fix workflow: \`fix-railway\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Vercel Frontend" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.check_vercel.outputs.vercel_status }}" == "healthy" ]]; then
            echo "✅ **Healthy** - Frontend is responding correctly" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ steps.check_vercel.outputs.vercel_status }}" == "deploying" ]]; then
            echo "⏳ **Deploying** - Frontend deployment is still in progress" >> $GITHUB_STEP_SUMMARY
            echo "- Deployment ID: \`${{ steps.check_vercel.outputs.vercel_deployment_id }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Unhealthy** - Frontend is not responding correctly" >> $GITHUB_STEP_SUMMARY
            echo "- Deployment URL: [https://${{ steps.check_vercel.outputs.vercel_url }}](https://${{ steps.check_vercel.outputs.vercel_url }})" >> $GITHUB_STEP_SUMMARY
            echo "- Deployment ID: \`${{ steps.check_vercel.outputs.vercel_deployment_id }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Triggering fix workflow: \`fix-vercel\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ github.event_name }}" == "deployment" || "${{ github.event_name }}" == "deployment_status" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Immediate Deployment Check" >> $GITHUB_STEP_SUMMARY
            echo "- Triggered by: \`${{ github.event_name }}\` event" >> $GITHUB_STEP_SUMMARY
            echo "- Response time: < 60 seconds" >> $GITHUB_STEP_SUMMARY
          fi

  # New job to create detailed GitHub issues for failed deployments
  create-error-log-issue:
    needs: monitor-deployments
    if: needs.monitor-deployments.outputs.railway_status == 'unhealthy' || needs.monitor-deployments.outputs.vercel_status == 'unhealthy'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create personal access token
        id: create-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          
      - name: Fetch Vercel error logs
        if: needs.monitor-deployments.outputs.vercel_status == 'unhealthy' && needs.monitor-deployments.outputs.vercel_deployment_id != ''
        id: fetch_vercel_logs
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          DEPLOYMENT_ID: ${{ needs.monitor-deployments.outputs.vercel_deployment_id }}
        run: |
          echo "Fetching detailed logs for Vercel deployment $DEPLOYMENT_ID..."
          
          # Get deployment information
          DEPLOYMENT_INFO=$(curl -s -H "Authorization: Bearer $VERCEL_TOKEN" "https://api.vercel.com/v13/deployments/$DEPLOYMENT_ID")
          
          # Get build logs (all events including debug information)
          BUILD_LOGS=$(curl -s -H "Authorization: Bearer $VERCEL_TOKEN" "https://api.vercel.com/v6/deployments/$DEPLOYMENT_ID/events?limit=100")
          
          # Save full logs to file
          echo "$BUILD_LOGS" > vercel_logs.json
          
          # Extract all log messages in chronological order
          ALL_LOGS=$(echo "$BUILD_LOGS" | jq -r '.events[] | "\(.date) [\(.type)] \(.payload)"' | sort)
          echo "$ALL_LOGS" > vercel_logs.txt
          
          # Extract error messages from logs
          ERROR_LOGS=$(echo "$BUILD_LOGS" | jq -r '.events[] | select(.type == "stderr" or .type == "error") | "\(.date) [\(.type)] \(.payload)"' | sort)
          echo "$ERROR_LOGS" > vercel_error_logs.txt
          
          # Get deployment metadata
          CREATED_AT=$(echo "$DEPLOYMENT_INFO" | jq -r '.created')
          CREATOR=$(echo "$DEPLOYMENT_INFO" | jq -r '.creator.username')
          TARGET=$(echo "$DEPLOYMENT_INFO" | jq -r '.target')
          STATE=$(echo "$DEPLOYMENT_INFO" | jq -r '.state')
          URL=$(echo "$DEPLOYMENT_INFO" | jq -r '.url')
          
          echo "deployment_created=$CREATED_AT" >> $GITHUB_OUTPUT
          echo "deployment_creator=$CREATOR" >> $GITHUB_OUTPUT
          echo "deployment_target=$TARGET" >> $GITHUB_OUTPUT
          echo "deployment_state=$STATE" >> $GITHUB_OUTPUT
          echo "deployment_url=$URL" >> $GITHUB_OUTPUT

      - name: Fetch Railway error logs
        if: needs.monitor-deployments.outputs.railway_status == 'unhealthy'
        id: fetch_railway_logs
        run: |
          echo "Fetching Railway backend logs..."
          
          # Test multiple endpoints to gather diagnostic information
          BACKEND_URL="https://tez-social-production.up.railway.app"
          
          # Check main endpoints
          ROOT_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $BACKEND_URL || echo "Failed to connect")
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $BACKEND_URL/api/health || echo "Failed to connect")
          API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $BACKEND_URL/api || echo "Failed to connect")
          
          echo "Railway root endpoint status: $ROOT_STATUS" > railway_logs.txt
          echo "Railway health endpoint status: $HEALTH_STATUS" >> railway_logs.txt
          echo "Railway API endpoint status: $API_STATUS" >> railway_logs.txt
          
          # Try to get some response body for debugging
          echo "\nResponse body from root endpoint:" >> railway_logs.txt
          curl -s $BACKEND_URL >> railway_logs.txt 2>&1
          
          echo "\nResponse body from health endpoint:" >> railway_logs.txt
          curl -s $BACKEND_URL/api/health >> railway_logs.txt 2>&1
          
          echo "\nTracing connection to Railway backend:" >> railway_logs.txt
          traceroute -m 15 tez-social-production.up.railway.app >> railway_logs.txt 2>&1 || echo "Traceroute failed" >> railway_logs.txt
          
          echo "railway_root_status=$ROOT_STATUS" >> $GITHUB_OUTPUT
          echo "railway_health_status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
          echo "railway_api_status=$API_STATUS" >> $GITHUB_OUTPUT

      - name: Get git changes since last successful deployment
        run: |
          # Get recent commits
          git log -n 10 --pretty=format:"%h - %an, %ar : %s" > recent_commits.txt
          
          # Get diff stats for last few commits
          git diff HEAD~5..HEAD --stat > recent_changes.txt
          
          # Create empty files so upload doesn't fail if they don't exist
          touch vercel_logs.json vercel_logs.txt vercel_error_logs.txt railway_logs.txt

      - name: Create GitHub issue with deployment logs
        id: create_issue
        continue-on-error: true
        run: |
          # Format issue title with timestamp
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M UTC")
          ISSUE_TITLE="🔥 Deployment Error Report: $TIMESTAMP"
          
          # Create issue body parts
          SUMMARY="# Deployment Error Report\n\n## Summary\n\nThis issue was automatically created by the deployment monitoring system. One or more deployment issues have been detected and require human attention.\n\n**Run ID:** [${GITHUB_RUN_ID}](https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})"
          
          # Create status table
          VERCEL_STATUS="${{ needs.monitor-deployments.outputs.vercel_status }}"
          RAILWAY_STATUS="${{ needs.monitor-deployments.outputs.railway_status }}"
          
          VERCEL_STATUS_EMOJI=$([ "$VERCEL_STATUS" == "unhealthy" ] && echo "❌ **FAILED**" || echo "✅ **HEALTHY**")
          RAILWAY_STATUS_EMOJI=$([ "$RAILWAY_STATUS" == "unhealthy" ] && echo "❌ **FAILED**" || echo "✅ **HEALTHY**")
          
          VERCEL_DETAILS=$([ "$VERCEL_STATUS" == "unhealthy" ] && echo "Deployment has errors" || echo "No issues detected")
          RAILWAY_DETAILS=$([ "$RAILWAY_STATUS" == "unhealthy" ] && echo "API endpoints not responding" || echo "All endpoints responding")
          
          STATUS_TABLE="\n\n| Service | Status | Details |\n| ------- | ------ | ------- |\n| Vercel Frontend | $VERCEL_STATUS_EMOJI | $VERCEL_DETAILS |\n| Railway Backend | $RAILWAY_STATUS_EMOJI | $RAILWAY_DETAILS |"
          
          # Create error details section
          ERROR_DETAILS="\n\n## Error Details"
          
          # Add Vercel details if unhealthy
          if [ "$VERCEL_STATUS" == "unhealthy" ]; then
            DEPLOYMENT_ID="${{ needs.monitor-deployments.outputs.vercel_deployment_id }}"
            DEPLOYMENT_URL="${{ needs.monitor-deployments.outputs.vercel_url }}"
            VERCEL_SECTION="\n\n### Vercel Deployment Issues\n\n**Deployment ID:** \`$DEPLOYMENT_ID\`\n**Deployment URL:** [https://$DEPLOYMENT_URL](https://$DEPLOYMENT_URL)\n\n<details>\n<summary>📋 View Vercel Logs (Click to expand)</summary>\n\nThe full error logs are available as artifacts on the workflow run page.\n\n</details>"
            ERROR_DETAILS="$ERROR_DETAILS$VERCEL_SECTION"
          fi
          
          # Add Railway details if unhealthy
          if [ "$RAILWAY_STATUS" == "unhealthy" ]; then
            RAILWAY_SECTION="\n\n### Railway Backend Issues\n\n<details>\n<summary>📋 View Railway Logs (Click to expand)</summary>\n\nThe full error logs are available as artifacts on the workflow run page.\n\n</details>"
            ERROR_DETAILS="$ERROR_DETAILS$RAILWAY_SECTION"
          fi
          
          # Add next steps
          NEXT_STEPS="\n\n## Next Steps\n\n1. Review the complete logs in the workflow artifacts\n2. Check the specific error messages in the logs\n3. Apply appropriate fixes based on the error details\n4. Re-run the deployment monitor workflow to verify the fix\n\n---\n\n<sub>This issue was automatically generated by the deployment monitoring system at $TIMESTAMP</sub>"
          
          # Combine all sections
          ISSUE_BODY="$SUMMARY$STATUS_TABLE$ERROR_DETAILS$NEXT_STEPS"
          
          # Create the issue using GitHub API
          curl -X POST \
            -H "Authorization: Bearer ${{ steps.create-token.outputs.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues" \
            -d "{
              \"title\": \"$ISSUE_TITLE\",
              \"body\": $(echo -e "$ISSUE_BODY" | jq -R -s .),
              \"labels\": [\"deployment-error\", \"needs-attention\"]
            }"

      - name: Upload log artifacts
        id: upload_logs
        continue-on-error: true
        uses: actions/upload-artifact@v2
        with:
          name: deployment-logs
          path: |
            vercel_logs.json
            vercel_logs.txt
            vercel_error_logs.txt
            railway_logs.txt
            recent_commits.txt
            recent_changes.txt
          retention-days: 30 