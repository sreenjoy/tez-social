name: Fix Vercel Deployment

on:
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      deployment_id:
        description: 'Vercel deployment ID to analyze (or use "auto-detect" to find latest)'
        required: true
        type: string
        default: 'auto-detect'
      deployment_url:
        description: 'Vercel deployment URL to analyze (or use "auto-detect" to find latest)'
        required: true
        type: string
        default: 'auto-detect'
  # Run on schedule to automatically fix issues
  schedule:
    - cron: '*/15 * * * *'  # Run every 15 minutes


# Add permissions needed for GitHub token
permissions:
  actions: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  pull-requests: write

jobs:
  # First job to detect failed deployments
  detect-failures:
    runs-on: ubuntu-latest
    outputs:
      deployment_id: ${{ steps.detect_failures.outputs.deployment_id }}
      deployment_url: ${{ steps.detect_failures.outputs.deployment_url }}
      has_failures: ${{ steps.detect_failures.outputs.has_failures }}
    steps:
      - name: Check for failed deployments
        id: detect_failures
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "Checking for failed Vercel deployments..."
          
          # Get recent deployments
          ALL_DEPLOYMENTS=$(curl -s -H "Authorization: Bearer $VERCEL_TOKEN" "https://api.vercel.com/v6/deployments?limit=10&teamId=$VERCEL_ORG_ID&projectId=$VERCEL_PROJECT_ID")
          
          # Count error deployments
          ERROR_COUNT=$(echo $ALL_DEPLOYMENTS | jq -r '.deployments | map(select(.state == "ERROR")) | length')
          echo "Found $ERROR_COUNT deployments with ERROR state"
          
          if [[ $ERROR_COUNT -gt 0 ]]; then
            # Get the first error deployment
            ERROR_DEPLOYMENT=$(echo $ALL_DEPLOYMENTS | jq -r '.deployments | map(select(.state == "ERROR")) | first')
            DEPLOYMENT_ID=$(echo $ERROR_DEPLOYMENT | jq -r '.uid')
            DEPLOYMENT_URL=$(echo $ERROR_DEPLOYMENT | jq -r '.url')
            
            echo "Will fix deployment ID: $DEPLOYMENT_ID"
            echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
            echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
            echo "has_failures=true" >> $GITHUB_OUTPUT
          else
            # Check if there was a manually specified deployment ID
            if [[ "${{ github.event.inputs.deployment_id }}" != "" && "${{ github.event.inputs.deployment_id }}" != "auto-detect" ]]; then
              echo "Using manually specified deployment ID: ${{ github.event.inputs.deployment_id }}"
              echo "deployment_id=${{ github.event.inputs.deployment_id }}" >> $GITHUB_OUTPUT
              echo "deployment_url=${{ github.event.inputs.deployment_url }}" >> $GITHUB_OUTPUT
              echo "has_failures=true" >> $GITHUB_OUTPUT
            else
              echo "No failed deployments found and no manual deployment ID specified"
              echo "has_failures=false" >> $GITHUB_OUTPUT
            fi
          fi
  
  # Only run fix job if failures were detected
  diagnose-and-fix:
    needs: detect-failures
    if: needs.detect-failures.outputs.has_failures == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Get deployment logs
        id: get_logs
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          DEPLOYMENT_ID: ${{ needs.detect-failures.outputs.deployment_id }}
          DEPLOYMENT_URL: ${{ needs.detect-failures.outputs.deployment_url }}
        run: |
          echo "Getting logs for deployment $DEPLOYMENT_ID..."
          
          # Get deployment information
          DEPLOYMENT_INFO=$(curl -s -H "Authorization: Bearer $VERCEL_TOKEN" "https://api.vercel.com/v13/deployments/$DEPLOYMENT_ID")
          
          # Get build logs
          BUILD_LOGS=$(curl -s -H "Authorization: Bearer $VERCEL_TOKEN" "https://api.vercel.com/v6/deployments/$DEPLOYMENT_ID/events")
          
          # Save logs to file
          echo "$BUILD_LOGS" > deployment_logs.json
          
          # Extract error messages from logs
          ERROR_LOGS=$(echo "$BUILD_LOGS" | jq -r '.events[] | select(.type == "stderr" or .type == "error") | .payload' | grep -v "^null$" || echo "No error logs found")
          WARNING_LOGS=$(echo "$BUILD_LOGS" | jq -r '.events[] | select(.type == "warn") | .payload' | grep -v "^null$" || echo "No warning logs found")
          
          echo "Error logs:"
          echo "$ERROR_LOGS"
          echo "Warning logs:"
          echo "$WARNING_LOGS"
          
          # Look for common error patterns and set error type
          if echo "$ERROR_LOGS" | grep -q "ModuleNotFoundError" || echo "$ERROR_LOGS" | grep -q "Cannot find module"; then
            echo "error_type=module_not_found" >> $GITHUB_OUTPUT
          elif echo "$ERROR_LOGS" | grep -q "Failed to compile"; then
            echo "error_type=compilation_error" >> $GITHUB_OUTPUT
          elif echo "$ERROR_LOGS" | grep -q "Out of memory"; then
            echo "error_type=out_of_memory" >> $GITHUB_OUTPUT
          elif echo "$ERROR_LOGS" | grep -q "TypeError"; then
            echo "error_type=type_error" >> $GITHUB_OUTPUT
          elif echo "$ERROR_LOGS" | grep -q "SyntaxError"; then
            echo "error_type=syntax_error" >> $GITHUB_OUTPUT
          elif echo "$ERROR_LOGS" | grep -q "ENOENT"; then
            echo "error_type=file_not_found" >> $GITHUB_OUTPUT
          elif echo "$ERROR_LOGS" | grep -q "Error during Static export: Build optimization failed"; then
            echo "error_type=static_export_error" >> $GITHUB_OUTPUT
          elif echo "$ERROR_LOGS" | grep -q "document is not defined" || echo "$ERROR_LOGS" | grep -q "window is not defined"; then
            echo "error_type=ssr_error" >> $GITHUB_OUTPUT
          elif echo "$ERROR_LOGS" | grep -q "Error (404)"; then
            echo "error_type=route_error" >> $GITHUB_OUTPUT
          else
            echo "error_type=unknown" >> $GITHUB_OUTPUT
          fi
          
          # Write logs to summary
          echo "## Deployment Logs Analysis" > $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment ID**: \`$DEPLOYMENT_ID\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment URL**: [$DEPLOYMENT_URL](https://$DEPLOYMENT_URL)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Error Logs" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "$ERROR_LOGS" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Warning Logs" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "$WARNING_LOGS" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Apply fix based on error type
        id: apply_fix
        run: |
          ERROR_TYPE="${{ steps.get_logs.outputs.error_type }}"
          
          echo "Applying fix for error type: $ERROR_TYPE"
          
          case "$ERROR_TYPE" in
            module_not_found)
              echo "Fixing module not found error"
              cd frontend
              npm install
              git add package-lock.json
              git commit -m "fix: reinstall dependencies to resolve module not found error" || echo "No changes to commit"
              ;;
              
            compilation_error|syntax_error|type_error)
              echo "Fixing compilation error"
              # Check for unused imports or syntax issues
              cd frontend
              npx eslint --fix pages/**/*.tsx components/**/*.tsx
              git add .
              git commit -m "fix: resolve syntax and compilation errors" || echo "No changes to commit"
              ;;
              
            out_of_memory)
              echo "Fixing out of memory error"
              # Update build configuration to optimize memory usage
              NEXT_CONFIG="frontend/next.config.js"
              if [ -f "$NEXT_CONFIG" ]; then
                # Disable source maps and reduce build memory usage
                sed -i 's/productionBrowserSourceMaps: false/productionBrowserSourceMaps: false,\n  swcMinify: true,\n  experimental: {\n    esmExternals: false,\n    optimizeCss: true\n  }/' "$NEXT_CONFIG"
                git add "$NEXT_CONFIG"
                git commit -m "fix: optimize build configuration to reduce memory usage" || echo "No changes to commit"
              fi
              ;;
              
            static_export_error)
              echo "Fixing static export error"
              # Update the next.config.js file to handle static exports correctly
              NEXT_CONFIG="frontend/next.config.js"
              if [ -f "$NEXT_CONFIG" ]; then
                # Make sure to properly configure static exports
                sed -i 's/images: {/images: {\n    unoptimized: true,/' "$NEXT_CONFIG"
                git add "$NEXT_CONFIG"
                git commit -m "fix: update next.config.js to properly handle static exports" || echo "No changes to commit"
              fi
              ;;
              
            ssr_error)
              echo "Fixing SSR error"
              # Find files with problematic SSR code and update them
              cd frontend
              # Update component files to handle SSR properly
              find pages components -type f -name "*.tsx" -exec sed -i 's/typeof window !== "undefined" ? window/typeof window !== "undefined" ? window : {}/' {} \;
              find pages components -type f -name "*.tsx" -exec sed -i 's/typeof document !== "undefined" ? document/typeof document !== "undefined" ? document : {}/' {} \;
              git add .
              git commit -m "fix: handle browser API references in SSR context" || echo "No changes to commit"
              ;;
              
            file_not_found)
              echo "Fixing file not found error"
              # Verify file structure
              find frontend -type d | sort > directory_structure.txt
              git add directory_structure.txt
              git commit -m "chore: document directory structure for debugging" || echo "No changes to commit"
              ;;
              
            route_error)
              echo "Fixing route error"
              # Check for incorrect route configurations
              NEXT_CONFIG="frontend/next.config.js"
              if [ -f "$NEXT_CONFIG" ]; then
                # Ensure routes are configured correctly
                sed -i 's#api/:path#api/:path*#g' "$NEXT_CONFIG"
                git add "$NEXT_CONFIG"
                git commit -m "fix: correct API route pattern in next.config.js" || echo "No changes to commit"
              fi
              ;;
              
            unknown)
              echo "Applying general fixes for unknown error"
              # General cleanup and rebuild
              cd frontend
              rm -rf .next out node_modules
              npm ci
              git add package-lock.json
              git commit -m "fix: clean build and reinstall dependencies" || echo "No changes to commit"
              ;;
          esac
          
          # Set fix applied flag to true
          echo "fix_applied=true" >> $GITHUB_OUTPUT

      - name: Push changes
        if: steps.apply_fix.outputs.fix_applied == 'true'
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git push

      - name: Trigger new deployment
        run: |
          echo "Triggering new deployment..."
          git commit --allow-empty -m "chore: trigger new deployment after fixes"
          git push
          
      - name: Update summary with fix details
        run: |
          ERROR_TYPE="${{ steps.get_logs.outputs.error_type }}"
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Applied Fixes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          case "$ERROR_TYPE" in
            module_not_found)
              echo "- Reinstalled dependencies to resolve missing module references" >> $GITHUB_STEP_SUMMARY
              echo "- This addresses issues with npm packages that might be missing or incorrectly referenced" >> $GITHUB_STEP_SUMMARY
              ;;
              
            compilation_error|syntax_error|type_error)
              echo "- Fixed syntax errors and compilation issues" >> $GITHUB_STEP_SUMMARY
              echo "- Used eslint to automatically fix code style and simple syntax problems" >> $GITHUB_STEP_SUMMARY
              ;;
              
            out_of_memory)
              echo "- Optimized build configuration to reduce memory usage" >> $GITHUB_STEP_SUMMARY
              echo "- Disabled source maps and enabled SWC minification for faster, lighter builds" >> $GITHUB_STEP_SUMMARY
              ;;
              
            static_export_error)
              echo "- Updated Next.js configuration to properly handle static exports" >> $GITHUB_STEP_SUMMARY
              echo "- Set images to use unoptimized mode which is required for static exports" >> $GITHUB_STEP_SUMMARY
              ;;
              
            ssr_error)
              echo "- Fixed handling of browser-only APIs during server-side rendering" >> $GITHUB_STEP_SUMMARY
              echo "- Added proper checks for \`window\` and \`document\` references" >> $GITHUB_STEP_SUMMARY
              ;;
              
            file_not_found)
              echo "- Documented directory structure to identify missing files" >> $GITHUB_STEP_SUMMARY
              echo "- This helps debug ENOENT (file not found) errors by showing what files are actually present" >> $GITHUB_STEP_SUMMARY
              ;;
              
            route_error)
              echo "- Corrected API route patterns in Next.js configuration" >> $GITHUB_STEP_SUMMARY
              echo "- Fixed incorrect route patterns that may have been causing 404 errors" >> $GITHUB_STEP_SUMMARY
              ;;
              
            unknown)
              echo "- Performed clean rebuild by removing build artifacts and node_modules" >> $GITHUB_STEP_SUMMARY
              echo "- Reinstalled all dependencies to ensure a clean build environment" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "A new deployment has been triggered. The deployment monitor will check the status again soon." >> $GITHUB_STEP_SUMMARY 