name: Verify GitHub App Permissions

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  verify-permissions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify GitHub App
        id: verify
        env:
          APP_ID: ${{ secrets.APP_ID }}
          APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Install necessary packages
          npm install -g @octokit/auth-app @octokit/rest

          # Create verification script
          cat > verify_app.js << 'EOL'
          const { createAppAuth } = require('@octokit/auth-app');
          const { Octokit } = require('@octokit/rest');
          
          async function verifyAppPermissions() {
            try {
              // Authenticate as the GitHub App
              const auth = createAppAuth({
                appId: process.env.APP_ID,
                privateKey: process.env.APP_PRIVATE_KEY,
              });
              
              // Get app authentication
              const appAuthentication = await auth({ type: 'app' });
              
              // Create Octokit instance
              const octokit = new Octokit({
                auth: appAuthentication.token
              });
              
              // Get app information
              console.log("🔍 Fetching GitHub App information...");
              const { data: app } = await octokit.request('GET /app', {
                headers: {
                  'X-GitHub-Api-Version': '2022-11-28'
                }
              });
              
              console.log(`\n✅ GitHub App: ${app.name} (ID: ${app.id})`);
              
              // Get app permissions
              console.log("\n📋 Current Permissions:");
              const permissions = app.permissions;
              
              // Log all available permissions for debugging
              console.log("\nAll available permissions:");
              Object.keys(permissions).forEach(perm => {
                console.log(`- ${perm}: ${permissions[perm]}`);
              });
              
              // Map API permission values to human-readable format
              const permissionMap = {
                "read": "Read-only",
                "write": "Read & write",
                "admin": "Admin"
              };
              
              // Check specific permissions
              const requiredPermissions = [
                { name: "actions", level: "write" },
                { name: "checks", level: "write" },
                { name: "contents", level: "write" },
                { name: "deployments", level: "write" },
                { name: "issues", level: "write" },
                { name: "pull_requests", level: "write" },
                { name: "workflows", level: "write" }
              ];
              
              // Optional permissions (might have different API names)
              const optionalPermissions = [
                { name: "statuses", level: "write" },
                { name: "commit_statuses", level: "write" },
                { name: "status", level: "write" }
              ];
              
              let allRequiredPermissionsCorrect = true;
              let anyOptionalPermissionSet = false;
              
              // Create a table header for required permissions
              console.log("\n**Required Permissions:**");
              console.log("| Permission | Required Level | Current Level | Status |");
              console.log("|------------|----------------|--------------|--------|");
              
              for (const required of requiredPermissions) {
                const currentLevel = permissions[required.name] || "no access";
                const hasCorrectPermission = currentLevel === required.level;
                
                if (!hasCorrectPermission) {
                  allRequiredPermissionsCorrect = false;
                }
                
                console.log(`| ${required.name} | ${permissionMap[required.level]} | ${permissionMap[currentLevel] || "No access"} | ${hasCorrectPermission ? "✓" : "✗"} |`);
              }
              
              // Check optional permissions
              console.log("\n**Optional Permissions:**");
              console.log("| Permission | Required Level | Current Level | Status |");
              console.log("|------------|----------------|--------------|--------|");
              
              for (const optional of optionalPermissions) {
                const currentLevel = permissions[optional.name] || "no access";
                const hasCorrectPermission = currentLevel === optional.level;
                
                if (hasCorrectPermission) {
                  anyOptionalPermissionSet = true;
                }
                
                console.log(`| ${optional.name} | ${permissionMap[optional.level]} | ${permissionMap[currentLevel] || "No access"} | ${hasCorrectPermission ? "✓" : "Optional"} |`);
              }
              
              // Check for events
              console.log("\n📅 Event Subscriptions:");
              const requiredEvents = [
                "check_run",
                "check_suite",
                "deployment",
                "deployment_status",
                "push",
                "workflow_job",
                "workflow_run"
              ];
              
              const optionalEvents = [
                "status"
              ];
              
              // Handling events is more complex, but we'll at least list what should be enabled
              console.log("\nRequired events that should be enabled:");
              requiredEvents.forEach(event => {
                console.log(`- ${event}`);
              });
              
              console.log("\nOptional events that should be enabled if available:");
              optionalEvents.forEach(event => {
                console.log(`- ${event}`);
              });
              
              // Final verdict
              console.log("\n🏁 Final Assessment:");
              if (allRequiredPermissionsCorrect) {
                console.log("✅ All required permissions are correctly set!");
                
                if (anyOptionalPermissionSet) {
                  console.log("✅ At least one optional permission is also set correctly!");
                } else {
                  console.log("⚠️ No optional permissions are set, but that's okay - the app will still function.");
                }
              } else {
                console.log("❌ Some required permissions need to be updated. Please follow the guide in .github/GITHUB_APP_UPDATE_GUIDE.md");
              }
              
              return allRequiredPermissionsCorrect;
            } catch (error) {
              console.error('❌ Error verifying app permissions:', error.message);
              return false;
            }
          }
          
          verifyAppPermissions()
            .then(success => {
              process.exit(success ? 0 : 1);
            })
            .catch(error => {
              console.error('Error:', error);
              process.exit(1);
            });
          EOL
          
          # Run the verification script
          node verify_app.js >> $GITHUB_STEP_SUMMARY

      - name: Commit Guide
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Check if there are changes to commit
          if git status --porcelain | grep -q ".github/GITHUB_APP_UPDATE_GUIDE.md"; then
            git add .github/GITHUB_APP_UPDATE_GUIDE.md
            git commit -m "docs: add GitHub App update guide"
            git push
          else
            echo "No changes to commit"
          fi 