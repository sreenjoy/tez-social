name: Auto-Monitor Deployments

on:
  # Run automatically every 10 minutes
  schedule:
    - cron: '*/10 * * * *'
  # Allow manual triggering
  workflow_dispatch:

permissions:
  contents: write
  deployments: write
  issues: write
  actions: write

jobs:
  monitor-vercel:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Fetch Vercel deployment status
        id: fetch_deployment
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "Checking Vercel deployments..."
          
          # Get recent deployments
          ALL_DEPLOYMENTS=$(curl -s -H "Authorization: Bearer $VERCEL_TOKEN" \
            "https://api.vercel.com/v6/deployments?limit=10&teamId=$VERCEL_ORG_ID&projectId=$VERCEL_PROJECT_ID")
          
          # Save deployments for analysis
          echo "$ALL_DEPLOYMENTS" > deployments.json
          
          # Count error deployments
          ERROR_COUNT=$(echo $ALL_DEPLOYMENTS | jq -r '.deployments | map(select(.state == "ERROR")) | length')
          echo "Found $ERROR_COUNT deployments with ERROR state"
          
          # Save error info
          echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
          
          if [[ $ERROR_COUNT -gt 0 ]]; then
            # Get the first error deployment
            ERROR_DEPLOYMENT=$(echo $ALL_DEPLOYMENTS | jq -r '.deployments | map(select(.state == "ERROR")) | first')
            DEPLOYMENT_ID=$(echo $ERROR_DEPLOYMENT | jq -r '.uid')
            DEPLOYMENT_URL=$(echo $ERROR_DEPLOYMENT | jq -r '.url')
            CREATED_AT=$(echo $ERROR_DEPLOYMENT | jq -r '.created')
            
            echo "Error deployment found:"
            echo "ID: $DEPLOYMENT_ID"
            echo "URL: $DEPLOYMENT_URL"
            echo "Created at: $CREATED_AT"
            
            echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
            echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
            echo "has_errors=true" >> $GITHUB_OUTPUT
          else
            echo "No error deployments found"
            echo "has_errors=false" >> $GITHUB_OUTPUT
          fi

      - name: Get deployment logs
        if: steps.fetch_deployment.outputs.has_errors == 'true'
        id: get_logs
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          DEPLOYMENT_ID: ${{ steps.fetch_deployment.outputs.deployment_id }}
        run: |
          echo "Getting logs for deployment $DEPLOYMENT_ID..."
          
          # Get build logs
          BUILD_LOGS=$(curl -s -H "Authorization: Bearer $VERCEL_TOKEN" \
            "https://api.vercel.com/v6/deployments/$DEPLOYMENT_ID/events")
          
          # Save logs to file
          echo "$BUILD_LOGS" > deployment_logs.json
          
          # Extract error messages from logs
          echo "Analyzing logs for common issues..."
          ERROR_LOGS=$(echo "$BUILD_LOGS" | jq -r '.events[] | select(.type == "stderr" or .type == "error") | .payload' | grep -v "^null$" || echo "No error logs found")
          
          # Write logs to summary and output file
          echo "$ERROR_LOGS" > error_logs.txt
          
          # Write summary
          echo "## Deployment Error Analysis" > $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Error Logs" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "$ERROR_LOGS" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          echo "logs_extracted=true" >> $GITHUB_OUTPUT

      - name: Create issue for deployment error
        if: steps.fetch_deployment.outputs.has_errors == 'true' && steps.get_logs.outputs.logs_extracted == 'true'
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: 'Vercel Deployment Error Detected'
          content-filepath: ./error_logs.txt
          labels: deployment, bug, priority
          
      - name: Trigger fix workflow
        if: steps.fetch_deployment.outputs.has_errors == 'true'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: fix-vercel.yml
          token: ${{ secrets.GITHUB_TOKEN }}
          inputs: '{"deployment_id": "${{ steps.fetch_deployment.outputs.deployment_id }}", "deployment_url": "${{ steps.fetch_deployment.outputs.deployment_url }}"}' 