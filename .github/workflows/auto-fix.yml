name: Auto-Fix Deployment Issues

on:
  workflow_dispatch:
    inputs:
      deployment_id:
        description: 'Vercel deployment ID that failed'
        required: true
      deployment_url:
        description: 'Vercel deployment URL'
        required: true

# Add permissions to allow workflow triggering
permissions:
  actions: write
  contents: write
  pull-requests: write

jobs:
  diagnose:
    runs-on: ubuntu-latest
    outputs:
      issue_type: ${{ steps.analyze.outputs.issue_type }}
      fix_branch: ${{ steps.create_fix_branch.outputs.branch_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Git identity
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
      
      - name: Get deployment logs
        id: get_logs
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          echo "Getting logs for deployment ${{ github.event.inputs.deployment_id }}..."
          
          LOGS=$(curl -s -H "Authorization: Bearer $VERCEL_TOKEN" \
            "https://api.vercel.com/v6/deployments/${{ github.event.inputs.deployment_id }}/events")
          
          echo "$LOGS" > deployment_logs.json
          echo "Errors found:"
          cat deployment_logs.json | jq '.events[] | select(.type == "stderr" or .type == "error") | .payload'
      
      - name: Analyze deployment issues
        id: analyze
        run: |
          echo "Analyzing deployment logs..."
          
          # Check for common errors in the logs
          if grep -q "Failed to compile" deployment_logs.json; then
            echo "::set-output name=issue_type::build_error"
          elif grep -q "Cannot find module" deployment_logs.json; then
            echo "::set-output name=issue_type::missing_dependency"
          elif grep -q "chunk" deployment_logs.json && grep -q "MUI" deployment_logs.json; then
            echo "::set-output name=issue_type::mui_chunk_error"
          elif grep -q "duplicate page" deployment_logs.json; then
            echo "::set-output name=issue_type::duplicate_pages"
          elif grep -q "Error: listen EADDRINUSE" deployment_logs.json; then
            echo "::set-output name=issue_type::port_conflict"
          else
            echo "::set-output name=issue_type::unknown_error"
          fi

      - name: Create fix branch
        id: create_fix_branch
        run: |
          BRANCH_NAME="auto-fix/deployment-$(date +%s)"
          echo "::set-output name=branch_name::$BRANCH_NAME"
          git checkout -b $BRANCH_NAME
          
  fix-issue:
    needs: diagnose
    runs-on: ubuntu-latest
    steps:
      - name: Checkout fix branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.diagnose.outputs.fix_branch }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Apply fix based on issue type
        id: apply_fix
        run: |
          ISSUE_TYPE="${{ needs.diagnose.outputs.issue_type }}"
          echo "Fixing issue type: $ISSUE_TYPE"
          
          case $ISSUE_TYPE in
            "build_error")
              echo "Fixing build errors..."
              # Check and fix Next.js config
              if [ -f frontend/next.config.js ]; then
                sed -i 's/esmExternals: false/esmExternals: "loose"/' frontend/next.config.js
                sed -i '/images:/ s/}/,unoptimized: true}/' frontend/next.config.js
                echo '  typescript: { ignoreBuildErrors: true },' >> frontend/next.config.js
                echo '  eslint: { ignoreDuringBuilds: true },' >> frontend/next.config.js
              fi
              ;;
              
            "missing_dependency")
              echo "Fixing missing dependencies..."
              cd frontend
              npm install
              ;;
              
            "mui_chunk_error")
              echo "Fixing MUI chunk errors..."
              if [ -f frontend/next.config.js ]; then
                # Ensure transpilePackages includes MUI
                if ! grep -q "transpilePackages" frontend/next.config.js; then
                  sed -i '/const nextConfig = {/a \  transpilePackages: ["@mui/material", "@mui/system", "@mui/icons-material"],' frontend/next.config.js
                fi
              fi
              ;;
              
            "duplicate_pages")
              echo "Fixing duplicate pages..."
              # Find and remove duplicate index pages
              find frontend/pages -name "index.tsx" -not -path "frontend/pages/index.tsx" -delete
              ;;
              
            "port_conflict")
              echo "No direct fix needed for port conflict, updating port configuration..."
              if [ -f backend/.env ]; then
                # Update port if it exists in .env
                sed -i 's/PORT=3001/PORT=3002/' backend/.env
              fi
              ;;
              
            *)
              echo "Applying general fixes..."
              # Create a fixed vercel.json without using HERE documents
              printf '{\n  "framework": "nextjs",\n  "buildCommand": "cd frontend && npm install && npm run build",\n  "devCommand": "cd frontend && npm run dev",\n  "outputDirectory": "frontend/.next",\n  "cleanUrls": true,\n  "regions": ["sfo1"],\n  "rewrites": [\n    {\n      "source": "/api/:path*",\n      "destination": "https://tez-social-production.up.railway.app/api/:path*"\n    }\n  ]\n}' > vercel.json
              ;;
          esac
          
          git add .
          git commit -m "fix: auto-fix deployment issues ($ISSUE_TYPE)" || echo "No changes to commit"
      
      - name: Push changes
        run: |
          git push origin ${{ needs.diagnose.outputs.fix_branch }}
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "fix: auto-fix deployment issues"
          title: "Auto-fix: Resolve deployment issues"
          body: |
            This PR was automatically created to fix deployment issues.
            
            Issue type identified: ${{ needs.diagnose.outputs.issue_type }}
            
            The changes in this PR attempt to fix the deployment problem automatically.
            
            If this fix works, the deployment should succeed after merging.
          branch: ${{ needs.diagnose.outputs.fix_branch }}
          base: main
          labels: automated-fix, deployment
      
  redeploy:
    needs: fix-issue
    runs-on: ubuntu-latest
    steps:
      - name: Create personal access token
        id: create-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Trigger deployment workflow again
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: vercel-deploy.yml
          token: ${{ steps.create-token.outputs.token || secrets.WORKFLOW_PAT || secrets.GITHUB_TOKEN }}
          inputs: '{"deploy_attempt": "auto-retry"}' 