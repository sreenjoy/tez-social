name: Test Credentials

on:
  workflow_dispatch:
    inputs:
      check_type:
        description: 'What credentials to test'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - vercel
          - railway
          - github_app


# Add permissions needed for GitHub token
permissions:
  actions: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  pull-requests: write

jobs:
  test-credentials:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Test Vercel credentials
        if: ${{ github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'vercel' }}
        id: test_vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "### Testing Vercel Credentials" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -z "$VERCEL_TOKEN" ]; then
            echo "❌ VERCEL_TOKEN is not set" >> $GITHUB_STEP_SUMMARY
            echo "vercel_status=failed" >> $GITHUB_OUTPUT
          else
            echo "✅ VERCEL_TOKEN is set" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -z "$VERCEL_ORG_ID" ]; then
            echo "❌ VERCEL_ORG_ID is not set" >> $GITHUB_STEP_SUMMARY
            echo "vercel_status=failed" >> $GITHUB_OUTPUT
          else
            echo "✅ VERCEL_ORG_ID is set" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -z "$VERCEL_PROJECT_ID" ]; then
            echo "❌ VERCEL_PROJECT_ID is not set" >> $GITHUB_STEP_SUMMARY
            echo "vercel_status=failed" >> $GITHUB_OUTPUT
          else
            echo "✅ VERCEL_PROJECT_ID is set" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test the API access if all credentials are set
          if [ -n "$VERCEL_TOKEN" ] && [ -n "$VERCEL_ORG_ID" ] && [ -n "$VERCEL_PROJECT_ID" ]; then
            echo "Testing API access..." >> $GITHUB_STEP_SUMMARY
            
            # Test team access
            TEAM_RESPONSE=$(curl -s -o team_response.json -w "%{http_code}" -H "Authorization: Bearer $VERCEL_TOKEN" "https://api.vercel.com/v2/teams?teamId=$VERCEL_ORG_ID")
            
            if [ "$TEAM_RESPONSE" = "200" ]; then
              echo "✅ Successfully accessed Vercel Team API" >> $GITHUB_STEP_SUMMARY
              TEAM_NAME=$(cat team_response.json | jq -r '.teams[0].name')
              echo "   Team name: $TEAM_NAME" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Failed to access Vercel Team API (HTTP $TEAM_RESPONSE)" >> $GITHUB_STEP_SUMMARY
              echo "vercel_status=failed" >> $GITHUB_OUTPUT
            fi
            
            # Test project access
            PROJECT_RESPONSE=$(curl -s -o project_response.json -w "%{http_code}" -H "Authorization: Bearer $VERCEL_TOKEN" "https://api.vercel.com/v9/projects/$VERCEL_PROJECT_ID?teamId=$VERCEL_ORG_ID")
            
            if [ "$PROJECT_RESPONSE" = "200" ]; then
              echo "✅ Successfully accessed Vercel Project API" >> $GITHUB_STEP_SUMMARY
              PROJECT_NAME=$(cat project_response.json | jq -r '.name')
              echo "   Project name: $PROJECT_NAME" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Failed to access Vercel Project API (HTTP $PROJECT_RESPONSE)" >> $GITHUB_STEP_SUMMARY
              echo "vercel_status=failed" >> $GITHUB_OUTPUT
            fi
            
            # Test deployments access
            DEPLOYMENT_RESPONSE=$(curl -s -o deployment_response.json -w "%{http_code}" -H "Authorization: Bearer $VERCEL_TOKEN" "https://api.vercel.com/v6/deployments?teamId=$VERCEL_ORG_ID&projectId=$VERCEL_PROJECT_ID&limit=1")
            
            if [ "$DEPLOYMENT_RESPONSE" = "200" ]; then
              echo "✅ Successfully accessed Vercel Deployments API" >> $GITHUB_STEP_SUMMARY
              if [ "$(cat deployment_response.json | jq '.deployments | length')" -gt 0 ]; then
                DEPLOYMENT_ID=$(cat deployment_response.json | jq -r '.deployments[0].uid')
                DEPLOYMENT_STATE=$(cat deployment_response.json | jq -r '.deployments[0].state')
                echo "   Latest deployment ID: $DEPLOYMENT_ID" >> $GITHUB_STEP_SUMMARY
                echo "   State: $DEPLOYMENT_STATE" >> $GITHUB_STEP_SUMMARY
              else
                echo "   No deployments found" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "❌ Failed to access Vercel Deployments API (HTTP $DEPLOYMENT_RESPONSE)" >> $GITHUB_STEP_SUMMARY
              echo "vercel_status=failed" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Set default output if not set already
          if [ -z "$GITHUB_OUTPUT" ] || ! grep -q "vercel_status" "$GITHUB_OUTPUT"; then
            echo "vercel_status=success" >> $GITHUB_OUTPUT
          fi

      - name: Test Railway integration
        if: ${{ github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'railway' }}
        id: test_railway
        run: |
          echo "### Testing Railway Integration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test main endpoint
          RAILWAY_MAIN_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://tez-social-production.up.railway.app)
          echo "Main endpoint response: $RAILWAY_MAIN_RESPONSE" >> $GITHUB_STEP_SUMMARY
          
          # Test health endpoint
          RAILWAY_HEALTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://tez-social-production.up.railway.app/api/health)
          
          if [ "$RAILWAY_HEALTH_RESPONSE" = "200" ]; then
            echo "✅ Successfully accessed Railway Health API" >> $GITHUB_STEP_SUMMARY
            echo "railway_status=success" >> $GITHUB_OUTPUT
            
            # Get the response content
            HEALTH_CONTENT=$(curl -s https://tez-social-production.up.railway.app/api/health)
            echo "   Health response: $HEALTH_CONTENT" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Failed to access Railway Health API (HTTP $RAILWAY_HEALTH_RESPONSE)" >> $GITHUB_STEP_SUMMARY
            echo "railway_status=failed" >> $GITHUB_OUTPUT
          fi
          
          # Test auth endpoint
          RAILWAY_AUTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://tez-social-production.up.railway.app/api/auth/login)
          
          if [ "$RAILWAY_AUTH_RESPONSE" = "200" ] || [ "$RAILWAY_AUTH_RESPONSE" = "401" ]; then
            echo "✅ Auth endpoint is accessible (HTTP $RAILWAY_AUTH_RESPONSE)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Auth endpoint is not accessible (HTTP $RAILWAY_AUTH_RESPONSE)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Test GitHub App credentials
        if: ${{ github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'github_app' }}
        id: test_github_app
        env:
          APP_ID: ${{ secrets.APP_ID }}
          APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}
        run: |
          echo "### Testing GitHub App Credentials" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -z "$APP_ID" ]; then
            echo "❌ APP_ID is not set" >> $GITHUB_STEP_SUMMARY
            echo "github_app_status=failed" >> $GITHUB_OUTPUT
          else
            echo "✅ APP_ID is set" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -z "$APP_PRIVATE_KEY" ]; then
            echo "❌ APP_PRIVATE_KEY is not set" >> $GITHUB_STEP_SUMMARY
            echo "github_app_status=failed" >> $GITHUB_OUTPUT
          else
            echo "✅ APP_PRIVATE_KEY is set" >> $GITHUB_STEP_SUMMARY
            
            # Check if the private key format looks correct
            if [[ "$APP_PRIVATE_KEY" == *"-----BEGIN RSA PRIVATE KEY-----"* && "$APP_PRIVATE_KEY" == *"-----END RSA PRIVATE KEY-----"* ]]; then
              echo "✅ APP_PRIVATE_KEY format looks correct" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ APP_PRIVATE_KEY format is incorrect" >> $GITHUB_STEP_SUMMARY
              echo "   Should start with '-----BEGIN RSA PRIVATE KEY-----' and end with '-----END RSA PRIVATE KEY-----'" >> $GITHUB_STEP_SUMMARY
              echo "github_app_status=failed" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Try to create a token if both variables are set
          if [ -n "$APP_ID" ] && [ -n "$APP_PRIVATE_KEY" ]; then
            # Install necessary packages
            npm install -g @octokit/auth-app
            
            # Create a test script
            echo "
            const { createAppAuth } = require('@octokit/auth-app');
            
            async function testAppCredentials() {
              try {
                const auth = createAppAuth({
                  appId: process.env.APP_ID,
                  privateKey: process.env.APP_PRIVATE_KEY,
                });
                
                // Try to get an installation token
                const appAuthentication = await auth({ type: 'app' });
                console.log('✅ Successfully authenticated as GitHub App');
                return true;
              } catch (error) {
                console.error('❌ Failed to authenticate as GitHub App:', error.message);
                return false;
              }
            }
            
            testAppCredentials()
              .then(success => {
                process.exit(success ? 0 : 1);
              })
              .catch(error => {
                console.error('Error:', error);
                process.exit(1);
              });
            " > test_github_app.js
            
            # Run the test script
            if node test_github_app.js >> $GITHUB_STEP_SUMMARY 2>&1; then
              echo "github_app_status=success" >> $GITHUB_OUTPUT
            else
              echo "github_app_status=failed" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Set default output if not set already
          if [ -z "$GITHUB_OUTPUT" ] || ! grep -q "github_app_status" "$GITHUB_OUTPUT"; then
            echo "github_app_status=failed" >> $GITHUB_OUTPUT
          fi

      - name: Generate summary
        run: |
          echo "## Credentials Test Summary" > $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          VERCEL_STATUS="${{ steps.test_vercel.outputs.vercel_status }}"
          RAILWAY_STATUS="${{ steps.test_railway.outputs.railway_status }}"
          GITHUB_APP_STATUS="${{ steps.test_github_app.outputs.github_app_status }}"
          
          if [ "$VERCEL_STATUS" = "success" ]; then
            echo "✅ **Vercel Credentials**: Working properly" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Vercel Credentials**: Issues detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "$RAILWAY_STATUS" = "success" ]; then
            echo "✅ **Railway Integration**: Working properly" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Railway Integration**: Issues detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "$GITHUB_APP_STATUS" = "success" ]; then
            echo "✅ **GitHub App Credentials**: Working properly" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **GitHub App Credentials**: Issues detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "For detailed results, see the sections below." >> $GITHUB_STEP_SUMMARY 